datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  usdPrice    Float?
  courseDuration String?
  courseTimeLimit Float?
  isPublished Boolean @default(false)

  categoryId String?   @db.Uuid
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  url  String

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assetId    String
  playbackId String?

  chapterId String  @unique @db.Uuid
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String

  chapterId String  @db.Uuid
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  swipeHashId String?
  userEmail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAddress {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @unique

  fullName String?
  address1 String?
  pinCode String?
  city String?
  state String?
  country String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId String @db.Uuid
  discount Float?
  codes String[]
  count Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduledEmail {
  id        String   @id @default(cuid())
  name      String
  email     String @unique
  sent      Boolean  @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}